{"version":3,"sources":["redux/todo/todo-selectors.tsx","redux/todo/todo-types.tsx","redux/todo/todo-actions.tsx","components/TodoElement/todoElement.tsx","components/TodoList/todoList.tsx","components/DoneElement/doneElement.tsx","components/DoneList/doneList.tsx","components/AddTodo/addTodo.tsx","App.tsx","reportWebVitals.ts","redux/todo/todo-reducer.tsx","redux/store.tsx","index.tsx"],"names":["stateUncheckedTodo","state","todo","filter","el","done","stateCheckedTodo","InputActionTypes","doDeleteTodo","type","payload","mapDispatchToProps","doCheckTodo","connector","connect","props","todoItem","id","task","className","onClick","length","map","todoElement","doUncheckTodo","checkedItem","checked","doAddTodo","useState","input","setInput","onChange","e","target","value","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","addTodo","uuidv4","toggleTodo","deleteTodo","todoReducer","action","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAAaA,EAAqB,SAACC,GAAD,OAC9BA,EAAMC,KAAKC,QAAO,SAACC,GAAD,OAAoB,IAAZA,EAAGC,SAEpBC,EAAmB,SAACL,GAAD,OAC5BA,EAAMC,KAAKC,QAAO,SAACC,GAAD,OAAoB,IAAZA,EAAGC,SCJpBE,EACC,WADDA,EAEG,aAFHA,EAGK,eAHLA,EAII,cCaJC,EAAe,SAACN,GAAD,MAAqB,CAC7CO,KAAMF,EACNG,QAASR,I,eCqBPS,EAAqB,CACvBH,eACAI,YDnCuB,SAACV,GAAD,MAAqB,CAC5CO,KAAMF,EACNG,QAASR,KCsCEW,EAFGC,YAAQ,KAAMH,EAEjBE,EAlCiC,SAACE,GAC7C,MAIIA,EAHAC,SAAYC,EADhB,EACgBA,GAAIC,EADpB,EACoBA,KAChBV,EAEAO,EAFAP,aACAI,EACAG,EADAH,YAEJ,OACI,sBAAKO,UAAU,YAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgCD,IAChC,sBAAKC,UAAU,6BAAf,UACI,wBACIA,UAAU,mBACVC,QAAS,kBAAMZ,EAAaO,EAAMC,WAFtC,oBAMA,wBACIG,UAAU,kBACVC,QAAS,kBAAMR,EAAYG,EAAMC,WAFrC,kCATwBC,MCqBzBJ,G,MAFGC,aAJM,SAACb,GAAD,MAAuB,CAC3CC,KAAMF,EAAmBC,MAKdY,EA/B2B,SAACE,GACvC,IAAQb,EAASa,EAATb,KACR,OACI,sBAAKiB,UAAU,sBAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,6CAEJ,qBAAKA,UAAU,aAAf,SACKjB,EAAKmB,OACFnB,EAAKoB,KACD,SAACC,GAAD,OACI,cAAC,EAAD,CACIP,SAAUO,GACLA,EAAYN,OAK7B,2DCSdN,G,MAAqB,CACvBa,cH1ByB,SAACtB,GAAD,MAAqB,CAC9CO,KAAMF,EACNG,QAASR,IGyBTM,iBAKWK,EAFGC,YAAQ,KAAMH,EAEjBE,EAhCiC,SAACE,GAC7C,IACIS,EAGAT,EAHAS,cACAhB,EAEAO,EAFAP,aAFJ,EAIIO,EADAU,YAAeR,EAHnB,EAGmBA,GAAIC,EAHvB,EAGuBA,KAEvB,OACI,sBAAKC,UAAU,YAAf,UACI,oBAAIA,UAAU,iBAAd,SAAgCD,IAChC,wBACIC,UAAU,mBACVC,QAAS,kBAAMZ,EAAaO,EAAMU,cAFtC,oBAMA,wBACIN,UAAU,oBACVC,QAAS,kBAAMI,EAAcT,EAAMU,cAFvC,iCAR4BR,MCoBzBJ,G,MAFGC,aAJM,SAACb,GAAD,MAAuB,CAC3CyB,QAASpB,EAAiBL,MAKfY,EA7BY,SAACE,GACxB,IAAQW,EAAYX,EAAZW,QACR,OACI,sBAAKP,UAAU,sBAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,6CAEJ,qBAAKA,UAAU,aAAf,SACKO,EAAQL,OACLK,EAAQJ,KAAI,SAACG,GAAD,OACR,cAAC,EAAD,CACIA,YAAaA,GACRC,EAAQT,OAIrB,4D,QCSdN,G,MAAqB,CACvBgB,ULlCqB,SAACzB,GAAD,MAAmB,CACxCO,KAAMF,EACNG,QAAS,CAAEQ,KAAMhB,OKqCNW,EAFGC,YAAQ,KAAMH,EAEjBE,EAhCW,SAACE,GACvB,MAA0Ba,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAMQH,EAAcZ,EAAdY,UAER,OACI,sBAAKR,UAAU,WAAf,UACI,uBACIY,SATQ,SAACC,GACjBF,EAASE,EAAEC,OAAOC,QASVf,UAAU,iBACVgB,YAAY,mBAEhB,wBACIhB,UAAU,kBACVC,QAAS,iBAAgB,KAAVS,GAAgBF,EAAUE,IAF7C,qBCOGO,EAvBiB,WAC5B,OACI,sBAAKjB,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,SACI,oEAEJ,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,qBAAf,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,sBAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,oBAAf,SACI,cAAC,EAAD,gBCVTkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8BCNRQ,EAA2B,CAC7B5C,KAAM,IAGJ6C,EAAU,SAACrC,GAAD,MAAkC,CAC9CO,GAAI+B,cACJ9B,KAAMR,EAAQQ,KACdb,MAAM,IAGJ4C,EAAa,SAAChD,EAAkBS,GAAnB,OACfT,EAAMC,KAAKoB,KAAI,SAAClB,GAAD,OACXA,EAAGa,KAAOP,EAAQO,GAAlB,2BAA4Bb,GAA5B,IAAgCC,MAAOD,EAAGC,OAASD,MAGrD8C,EAAa,SAACjD,EAAkBS,GAAnB,OACfT,EAAMC,KAAKC,QAAO,SAACC,GAAD,OAAQA,EAAGa,KAAOP,EAAQO,OA6BjCkC,EA3BK,WAGH,IAFblD,EAEY,uDAFO6C,EACnBM,EACY,uCACZ,OAAQA,EAAO3C,MACX,KAAKF,EACD,OAAO,2BACAN,GADP,IAEIC,KAAK,GAAD,mBAAMD,EAAMC,MAAZ,CAAkB6C,EAAQK,EAAO1C,aAE7C,KAAKH,EACL,KAAKA,EACD,OAAO,2BACAN,GADP,IAEIC,KAAM+C,EAAWhD,EAAOmD,EAAO1C,WAEvC,KAAKH,EACD,OAAO,2BACAN,GADP,IAEIC,KAAMgD,EAAWjD,EAAOmD,EAAO1C,WAGvC,QACI,OAAOT,I,iCCrCboD,EAAgB,CAClBC,IAAK,OACLC,Q,OAAAA,GAGEC,EAAmBC,YAAeJ,EAAeF,GAE1CO,EAETC,YAAYH,EAAkBI,YAAgBC,MCTlDC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,SAM5B7B,M","file":"static/js/main.de407218.chunk.js","sourcesContent":["export const stateUncheckedTodo = (state: stateType) =>\n    state.todo.filter((el) => el.done === false);\n\nexport const stateCheckedTodo = (state: stateType) =>\n    state.todo.filter((el) => el.done === true);\n","export const InputActionTypes = {\n    ADD_TODO: \"ADD_TODO\",\n    CHECK_TODO: \"CHECK_TODO\",\n    UNCHECK_TODO: \"UNCHECK_TODO\",\n    DELETE_TODO: \"DELETE_TODO\",\n};\n","import { InputActionTypes } from \"./todo-types\";\n\nexport const doAddTodo = (todo: string) => ({\n    type: InputActionTypes.ADD_TODO,\n    payload: { task: todo },\n});\n\nexport const doCheckTodo = (todo: todoType) => ({\n    type: InputActionTypes.CHECK_TODO,\n    payload: todo,\n});\n\nexport const doUncheckTodo = (todo: todoType) => ({\n    type: InputActionTypes.UNCHECK_TODO,\n    payload: todo,\n});\n\nexport const doDeleteTodo = (todo: todoType) => ({\n    type: InputActionTypes.DELETE_TODO,\n    payload: todo,\n});\n","import React from \"react\";\n\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { doCheckTodo, doDeleteTodo } from \"../../redux/todo/todo-actions\";\n\nimport \"./todoElement.scss\";\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype todoElementProps = PropsFromRedux & {\n    todoItem: todoType;\n};\n\nconst TodoElement: React.FC<todoElementProps> = (props: todoElementProps) => {\n    const {\n        todoItem: { id, task },\n        doDeleteTodo,\n        doCheckTodo,\n    } = props;\n    return (\n        <div className=\"todo-item\" key={id}>\n            <h6 className=\"todo-item-task\">{task}</h6>\n            <div className=\"todo-item-button-container\">\n                <button\n                    className=\"todo-item-delete\"\n                    onClick={() => doDeleteTodo(props.todoItem)}\n                >\n                    Delete\n                </button>\n                <button\n                    className=\"todo-item-check\"\n                    onClick={() => doCheckTodo(props.todoItem)}\n                >\n                    Mark as checked\n                </button>\n            </div>\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    doDeleteTodo,\n    doCheckTodo,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(TodoElement);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { stateUncheckedTodo } from \"../../redux/todo/todo-selectors\";\nimport TodoElement from \"../TodoElement/todoElement\";\n\nimport \"./todoList.scss\";\n\ntype todoListProps = PropsFromRedux & {};\n\nconst TodoList: React.FC<todoListProps> = (props: todoListProps) => {\n    const { todo } = props;\n    return (\n        <div className=\"todo-list-container\">\n            <div className=\"todo-list-title\">\n                <h5>Todo List</h5>\n            </div>\n            <div className=\"todo-items\">\n                {todo.length ? (\n                    todo.map(\n                        (todoElement: todoType): JSX.Element => (\n                            <TodoElement\n                                todoItem={todoElement}\n                                key={todoElement.id}\n                            />\n                        )\n                    )\n                ) : (\n                    <h6>There is no item</h6>\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: stateType) => ({\n    todo: stateUncheckedTodo(state),\n});\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(TodoList);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport { doUncheckTodo, doDeleteTodo } from \"../../redux/todo/todo-actions\";\n\nimport \"./doneElement.scss\";\n\ntype doneElementProps = PropsFromRedux & {\n    checkedItem: todoType;\n};\n\nconst DoneElement: React.FC<doneElementProps> = (props: doneElementProps) => {\n    const {\n        doUncheckTodo,\n        doDeleteTodo,\n        checkedItem: { id, task },\n    } = props;\n    return (\n        <div className=\"done-item\" key={id}>\n            <h6 className=\"todo-item-task\">{task}</h6>\n            <button\n                className=\"done-item-delete\"\n                onClick={() => doDeleteTodo(props.checkedItem)}\n            >\n                Delete\n            </button>\n            <button\n                className=\"done-item-uncheck\"\n                onClick={() => doUncheckTodo(props.checkedItem)}\n            >\n                Mark as unchecked\n            </button>\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    doUncheckTodo,\n    doDeleteTodo,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(DoneElement);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { stateCheckedTodo } from \"../../redux/todo/todo-selectors\";\nimport DoneElement from \"../DoneElement/doneElement\";\n\nimport \"./doneList.scss\";\n\ntype doneListProps = PropsFromRedux & {};\n\nconst DoneList: React.FC = (props: doneListProps) => {\n    const { checked } = props;\n    return (\n        <div className=\"done-list-container\">\n            <div className=\"done-list-title\">\n                <h5>Done List</h5>\n            </div>\n            <div className=\"done-items\">\n                {checked.length ? (\n                    checked.map((checkedItem: todoType) => (\n                        <DoneElement\n                            checkedItem={checkedItem}\n                            key={checked.id}\n                        />\n                    ))\n                ) : (\n                    <h6>There is no item </h6>\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: stateType) => ({\n    checked: stateCheckedTodo(state),\n});\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(DoneList);\n","import React, { useState } from \"react\";\n\nimport \"./addTodo.scss\";\n\nimport { connect } from \"react-redux\";\nimport { doAddTodo } from \"../../redux/todo/todo-actions\";\n\ntype addTodoProps = PropsFromRedux & {};\n\nconst AddTodo: React.FC = (props: addTodoProps) => {\n    const [input, setInput] = useState<string>(\"\");\n\n    const handleInput = (e: { target: HTMLInputElement }) => {\n        setInput(e.target.value);\n    };\n\n    const { doAddTodo } = props;\n\n    return (\n        <div className=\"add-todo\">\n            <input\n                onChange={handleInput}\n                className=\"add-todo-input\"\n                placeholder=\"Enter new todo\"\n            />\n            <button\n                className=\"add-todo-button\"\n                onClick={() => input !== \"\" && doAddTodo(input)}\n            >\n                &#x2b;\n            </button>\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    doAddTodo,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(AddTodo);\n","import React from \"react\";\nimport \"./app.scss\";\n\nimport TodoList from \"./components/TodoList/todoList\";\nimport DoneList from \"./components/DoneList/doneList\";\nimport AddTodo from \"./components/AddTodo/addTodo\";\n\ntype appProps = {};\n\nconst App: React.FC<appProps> = () => {\n    return (\n        <div className=\"app\">\n            <div className=\"title\">\n                <h6>Todo App with Redux / Typescript</h6>\n            </div>\n            <div className=\"main-container\">\n                <div className=\"add-todo-container\">\n                    <AddTodo />\n                </div>\n                <div className=\"list-container\">\n                    <div className=\"unchecked-container\">\n                        <TodoList />\n                    </div>\n                    <div className=\"checked-container\">\n                        <DoneList />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { InputActionTypes } from \"./todo-types\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst INITIAL_STATE: stateType = {\n    todo: [],\n};\n\nconst addTodo = (payload: todoType): todoType => ({\n    id: uuidv4(),\n    task: payload.task,\n    done: false,\n});\n\nconst toggleTodo = (state: stateType, payload: todoType): todoType[] =>\n    state.todo.map((el) =>\n        el.id === payload.id ? { ...el, done: !el.done } : el\n    );\n\nconst deleteTodo = (state: stateType, payload: todoType): todoType[] =>\n    state.todo.filter((el) => el.id !== payload.id);\n\nconst todoReducer = (\n    state: stateType = INITIAL_STATE,\n    action: actionType\n): stateType => {\n    switch (action.type) {\n        case InputActionTypes.ADD_TODO:\n            return {\n                ...state,\n                todo: [...state.todo, addTodo(action.payload)],\n            };\n        case InputActionTypes.CHECK_TODO:\n        case InputActionTypes.UNCHECK_TODO:\n            return {\n                ...state,\n                todo: toggleTodo(state, action.payload),\n            };\n        case InputActionTypes.DELETE_TODO:\n            return {\n                ...state,\n                todo: deleteTodo(state, action.payload),\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default todoReducer;\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport todoReducer from \"./todo/todo-reducer\";\n\nimport logger from \"redux-logger\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, todoReducer);\n\nexport const store: Store<stateType, actionType> & {\n    dispatch: dispatchType;\n} = createStore(persistedReducer, applyMiddleware(logger));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}